tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Kubernetes Cluster.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3/types.yaml
  - plugin:cloudify-diamond-plugin
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-utilities-plugin
  - plugin:cloudify-host-pool-plugin
  - imports/kubernetes.yaml

inputs:

  hostpool_svc_endpoint:
    type: string

  agent_user:
    type: string
    default: centos

  public_master_ip:
    type: string

dsl_definitions:

  _: &agent_installer
    install:
      implementation: agent.worker_installer.tasks.install
      inputs:
        cloudify_agent: &agent_config
          user: { get_attribute: [SELF, agent_config, user] }
          key: { get_attribute: [SELF, agent_config, key] }
          port: { get_attribute: [SELF, agent_config, port] }
    start:
      implementation: agent.worker_installer.tasks.start
      inputs:
        cloudify_agent: *agent_config
    stop:
      implementation: agent.worker_installer.tasks.stop
      inputs:
        cloudify_agent: *agent_config
    uninstall:
      implementation: agent.worker_installer.tasks.uninstall
      inputs:
        cloudify_agent: *agent_config
    restart:
      implementation: agent.worker_installer.tasks.restart
      inputs:
        cloudify_agent: *agent_config

node_templates:

  # Compute Node should be prepared with pre-install.sh
  k8s_node_host:
    type: cloudify.hostpool.nodes.LinuxHost
    properties:
      agent_config:
        user: { get_input: agent_user }
        install_method: remote
        port: 22
        key: { get_secret: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            service_url: { get_input: hostpool_svc_endpoint }
        delete:
          inputs:
            service_url: { get_input: hostpool_svc_endpoint }
      cloudify.interfaces.worker_installer: *agent_installer
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
              ProcessResourcesCollector:
                config:
                  enabled: true
                  unit: B
                  measure_collector_time: true
                  cpu_interval: 0.5
                  process:
                    hyperkube:
                      name: hyperkube

groups:
  k8s_node_group:
    members:
      - k8s_node_host

policies:
  kubernetes_node_vms_scaling_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances:  1
    targets: [k8s_node_group]

outputs:
  deployment-type:
    description: Deployment Type, Needed In order to determine if the kubernetes host is normal node or load balancer
    value: node

  deployment-node-data-type:
    description: Cloudify node type needed in kubernetes cloudify provider
    value: cloudify.nodes.ApplicationServer.kubernetes.Node
